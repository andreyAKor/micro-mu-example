// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: check_task.proto

/*
Package geo_proto_check_task is a generated protocol buffer package.

It is generated from these files:
	check_task.proto

It has these top-level messages:
	CheckTaskRpcRequest
	CheckTaskRpcResponse
*/
package geo_proto_check_task

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CheckTask service

type CheckTaskService interface {
	// Проверка пробивки станции
	CheckTask(ctx context.Context, in *CheckTaskRpcRequest, opts ...client.CallOption) (*CheckTaskRpcResponse, error)
}

type checkTaskService struct {
	c    client.Client
	name string
}

func NewCheckTaskService(name string, c client.Client) CheckTaskService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "geo.proto.check_task"
	}
	return &checkTaskService{
		c:    c,
		name: name,
	}
}

func (c *checkTaskService) CheckTask(ctx context.Context, in *CheckTaskRpcRequest, opts ...client.CallOption) (*CheckTaskRpcResponse, error) {
	req := c.c.NewRequest(c.name, "CheckTask.CheckTask", in)
	out := new(CheckTaskRpcResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CheckTask service

type CheckTaskHandler interface {
	// Проверка пробивки станции
	CheckTask(context.Context, *CheckTaskRpcRequest, *CheckTaskRpcResponse) error
}

func RegisterCheckTaskHandler(s server.Server, hdlr CheckTaskHandler, opts ...server.HandlerOption) {
	type checkTask interface {
		CheckTask(ctx context.Context, in *CheckTaskRpcRequest, out *CheckTaskRpcResponse) error
	}
	type CheckTask struct {
		checkTask
	}
	h := &checkTaskHandler{hdlr}
	s.Handle(s.NewHandler(&CheckTask{h}, opts...))
}

type checkTaskHandler struct {
	CheckTaskHandler
}

func (h *checkTaskHandler) CheckTask(ctx context.Context, in *CheckTaskRpcRequest, out *CheckTaskRpcResponse) error {
	return h.CheckTaskHandler.CheckTask(ctx, in, out)
}
